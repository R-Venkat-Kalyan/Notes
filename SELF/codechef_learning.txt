#HASHMAP PROGRAM 

import java.util.*;
import java.lang.*;
import java.io.*;

/* Name of the class has to be "Main" only if the class is public. */
class Codechef
{
	public static void main (String[] args) throws java.lang.Exception
	{
		Scanner de = new Scanner(System.in);
		int t = de.nextInt();
		for(int i = 1;i <= t;i++){
		    int n = de.nextInt();
		    int a[] = new int[n];
		    int j;
		    for(j = 0;j < n;j++)
		    a[j] = de.nextInt();
		    HashMap<Integer,Integer> hm = new HashMap<>();
		    for(j = 0;j < n;j++){
		        if(hm.containsKey(a[j]))
		        hm.put(a[j],hm.get(a[j]) + 1);
		        else
		        hm.put(a[j],1);
		    }
		     if(n == 1)
		     System.out.println("YES");
		     else{
		         int fre = 0;
		         for(Map.Entry<Integer,Integer> itr : hm.entrySet()){
		             if(itr.getValue() > fre)
		             fre = itr.getValue();
		         }
		         int count = 0;
		          for(Map.Entry<Integer,Integer> itr : hm.entrySet()){
		             if(itr.getValue() == fre)
		             count++;
		         }
		         if(count > 1)
		         System.out.println("NO");
		         else
		         System.out.println("YES");
		     }
		}
	}
}

Sample Input :
4
5
2 2 2 2 2
4
1 2 3 4
4
3 3 2 1
6
1 1 2 2 3 4

Sample Output :
YES
NO
YES
NO






#HashMap Program :
import java.util.*;
import java.lang.*;
import java.io.*;

/* Name of the class has to be "Main" only if the class is public. */
class Codechef
{
	public static void main (String[] args) throws java.lang.Exception
	{
		Scanner ts = new Scanner(System.in);
		int t = ts.nextInt();
		for(int i = 1;i <= t;i++){
		    int n = ts.nextInt();
		    HashMap<Integer,Integer> hm = new HashMap<>();
		    for(int j = 1;j <= n;j++){
		        int a = ts.nextInt();
		        int b = ts.nextInt();
		        if(a >= 1 && a <= 8){
		            if(hm.containsKey(a))
		              hm.put(a,(int)Math.max(hm.get(a),b));
		              else
		              hm.put(a,b);
		        }
		    }
		    int sum = 0;
		   for(int itr:hm.keySet())
		   sum += hm.get(itr);
		   System.out.println(sum);
		}
	}
}

Sample Input :
2
5
2 45
9 100
8 0
2 15
8 90
1
11 1

Sample output:
135
0



/* package codechef; // don't place package name! */

import java.util.*;
import java.lang.*;
import java.io.*;

/* Name of the class has to be "Main" only if the class is public. */
class Codechef
{
	public static void main (String[] args) throws java.lang.Exception
	{
		Scanner rb = new Scanner(System.in);
		int t = rb.nextInt();
		for(int i = 1;i <= t;i++){
		    int n = rb.nextInt();
		    int a[] = new int[n];
		    HashMap<Integer,Integer> hm = new HashMap<>();
		    for(int k = 0;k < n;k++)
		    a[k] = rb.nextInt();
		    for(int j = 0;j < n;j++){
		        if(hm.containsKey(a[j]))
		        hm.put(a[j],hm.get(a[j]) + 1);
		        else
		        hm.put(a[j],1);
		    }
		    List<Integer> al = new ArrayList<>();
		    for(Map.Entry<Integer,Integer> itr : hm.entrySet())
		    al.add(itr.getValue());
		  //  System.out.println(hm);
		  //  System.out.println(al);
		    int val = Collections.max(al);
		    System.out.println(n - val);
		}
	}
}


Sample Input:
4
3
3 3 3
6
1 3 2 1 2 2
4
1 2 1 2
5
1 3 2 4 5


Sample output:
0
3
2
4



1. https://leetcode.com/problems/binary-search/
4. https://leetcode.com/problems/missing-number/description/
5. https://practice.geeksforgeeks.org/problems/square-root/1?page=1&category[]=Binary%20Search&sortBy=submissions
6. https://leetcode.com/problems/sqrtx/ 
9. https://practice.geeksforgeeks.org/problems/find-pair-given-difference1559/1?page=1&category[]=Binary%20Search&sortBy=submissions
10. https://leetcode.com/problems/find-peak-element/submissions/
12. https://leetcode.com/problems/single-element-in-a-sorted-array/description/


leet code 290

class Solution {
    public boolean wordPattern(String s1, String s) {
        String arr[] = s.split("\\s+");
        if(s1.length() != arr.length)
        return false;
        
        Map<Character,String> hm = new HashMap<>();
        for(int i = 0;i < s1.length();i++){
            if(hm.containsKey(s1.charAt(i))){
                if(!hm.get(s1.charAt(i)).equals(arr[i]))
                return false;
            }
            
            else{
                if(hm.containsValue(arr[i]))
                return false;
                hm.put(s1.charAt(i),arr[i]);
            }
           
        }
        return true;
    }

}



Input: pattern = "abba", s = "dog cat cat dog"
Output: true
