C++
----------------------------------------------------------------------------------------------------------------------------------------------------
-> C++ language  was developed as an extension to 'C' language by  Bjarne Stroustrup in the year 1983.
-> The main differnece between 'C' and 'C++' is that 'C++'  supports the conecept of object and class.
-> C++ is a general-purpose, high-level, compiler-based and objected-oriented Programming Language.
-> C++ is portable and can be used to develop applications that can be adapted to multiple platforms.
-> C++ is a case sensitive language.


History of C++
------------------
-> In the early 1970s a scientis named Bjarne Stroustrup developed a language called as 'C with Classes'.
-> It was an extension of  'C' by adding support of OOPs to it.
-> In 1983 the language was renamed to C++ to reflect the newly implemented features.

----------------------------------------------------------------------------------------------------------------------------------------------------

Advantages of C++ over C
---------------------------------
-> High Performance
-> Object Oriented Paradigm
-> Platform Independent
-> Vast community and Libraries


Key factors which make C++ powerful
------------------------------------------------
-> Strong Typing (inbuilt strong typecasting)
-> Memory Management
-> Templates
-> Standard Libraries
-> Exception Handling

----------------------------------------------------------------------------------------------------------------------------------------------------

Structure of a C++ program
-----------------------------------
#include<iostream.h>
using namespace std;
int main( ){

      cout<<"hello world";
      return 0;
}


Header Files
----------------
-> In the above program #include is an example of header file which is used to include the header files to a program.
-> Header files contains the definitions of funcions and variables which are imported or used in any program.
-> Header files has the extension of  ".h".
-> Here 'iostream' is the header file that contains the definition of input and output stream functions.
-> iostream functions are:
          ~ cout<<  -> to print or display output
          ~ cin>>     -> to scan or read input
-> some of the popular header files in C++:
          ~ #include<iostream.h>       -> It is used for all input and output operations.
          ~ #include<fstream.h>        -> It is used for performing operations related to files.
          ~ #inlcude<bits/stdc++.h>  -> It is used to include all libraries


Namespace
----------------
-> Namespaces is added in C++ which is not available in C.
-> A Namespace is a declarative region that provides a scope for identifiers.
-> Identifiers are the rules that define how a variable_name or an function_name has to be defined.
-> Here 'using namspace std' is used to enable this.


Main Function
------------------
-> By design every C++ program starts execution from the main( ) only.
-> Every C++ program must be enclosed with in 'int main( )' only.

----------------------------------------------------------------------------------------------------------------------------------------------------

DataTypes in C++
----------------------- 
Primitive DataTypes :
                     1. int              --> 4 bytes  
                    2. float           --> 4 bytes (7 decimals)
                    3. double       --> 8 bytes(15 decimals)
                    4. char           -->  1 byte
                    5. bool           -->  1 byte
                    6. void          --> NULL (Void is used with functions and pointers)
                    7. wchar_t   --> 2 or 4 bytes (Character data type with larger values i.e. wide character)


 Ex : p1.cpp
--------------------------------------------------------------
//program to demonstrate datatypes in c++ :
#include<iostream>
using namespace std;

int main(){
    int a = 12;
    float b  = 12.0;
    char c = 'k';
    bool d = true;
    cout<<"size of int \t"<<sizeof(a)<<endl;
    cout<<"size of float "<<sizeof(b)<<endl;
    cout<<"size of char "<<sizeof(c)<<endl;
    cout<<"size of bool "<<sizeof(d)<<endl;
    
    return 0;
}


Modifiers in c++ 
--------------------------------------------------------------------------------------------------------------------------------------------------
1. Unsigned
2. Signed
3. Short
4. Long

Ex :
long int a;
short int b;

----------------------------------------------------------------------------------------------------------------------------------------------------

Default int
--------------
Size: 2 or 4 bytes
Range: -32768  to +32768 or -2,147,483,648 to +2,147,483,648
Macros : (INT_MIN, INT_MAX)


Unsigned int
-----------------
Size: 2 or 4 bytes
Range: 0  to +65,535 or 0 to +4,294,967,295
Macros : (USHRT_MAX)


long int
----------
Size: 4 or 8 bytes
Range: -2,147,483,648  to +2,147,483,647 or -9,223,372,036,854,775,808 to +9,223,372,036,854,775,807
Macros : (LONG_MIN, LONG_MAX)


Unsigned long
------------------
Size: 4 or 8 bytes
Range: (0 to 4,294,967,295) or (0 to 18,446,744,073,709,551,615)
Macros : (ULONG_MAX)


Short
-------
Size: 2 bytes guaranteed
Range: (-32,768 to 32,767)
Macros : (SHRT_MIN, SHRT_MAX)


Unsigned short
--------------------
Size: 2 bytes guaranteed
Range: (0 to 65,535)
Macros : (USHRT_MAX)

---------------------------------------------------------------------------------------------------------------------------------------------------

Input and Output in c++
---------------------------------------------------------------------------------------------------------------------------------------------------
Ex : 2
// program to demonstrate input and output in c++
#include<iostream>
using namespace std;

int main(){
    long int id;
    cout<<"Enter your Id number \n";
    cin>>id;
    string name;
    cout<<"Enter Your name \n";
    cin>>name;
    cout<<"Your name is : "<<name<<endl;
    cout<<"Your id is : "<<id;

}

Decision making statements in c++
---------------------------------------------------------------------------------------------------------------------------------------------------
--> This are used to alter the flow of execution.
--> In general if, else, else if are the three decision making statements.


Ex : 3
// program to demonstrate decision making statements in c++
#include<iostream>
using namespace std;
int main(){
long int ctc,debit;
cin>>ctc>>debit;
if(ctc >= 2400000){
cout<<"Continue job";
}
else if(debit >= 500000){
cout<<"Job";
}
else{
cout<<"own business";
}
}


Loops in c++  
---------------------------------------------------------------------------------------------------------------------------------------------------
--> Loops are used to repeat.
--> In general for, while, do while are the three looping structures.

Ex :
// program to demonstrate loops in c++
#include<iostream>
using namespace std;
int main(){
    cout<<"enter n \n";
    int n;
    cin>>n;
    // for loop demonstration
    for(int i = 1;i <= n;i++)
    cout<<i<<"\n";
    
    // while loop demonstration
    int i = 1;
    while(i <= n){
        cout<<i<<"\t";
        i += 1;
    }
    cout<<"\n";
    
     // do while loop demonstration
     int j = 1;
     do{
         cout<<j<<" ";
         j += 1;
     }
     while(j <= n);
}



break and continue keywords in c++
----------------------------------------------------------------------------------------------------------------------------------------------------
1. break : used to terminate the loop.
2. continue : used to skip the particular iteration based on the given condition.


Ex :
// program to demonstrate break and continue keywords in c++
#include<iostream>
using namespace std;
int main(){
    cout<<"enter n \n";
    int n,i;
    cin>>n;
    for(i = 1;i <= n;i++){
    // if(i == 4)
    // break;
    if(i == 5)
    continue;
    cout<<i<<"\n";
    }
    
}



Switch case in c++
---------------------------------------------------------------------------------------------------------------------------------------------------
--> can be used efficiently instead of using if else ladder.

Ex :
// program to demonstrate switch case in c++
#include<iostream>
using namespace std;
int main(){
    cout<<"enter rank \n";
    int rank,i;
    cin>>rank;
   switch(rank){
       case 1:
          cout<<"Abdul";
          break;
       case 2:
          cout<<"Tarun";
          break;
       case 3:
          cout<<"Jayaram";
          break;
       case 4:
          cout<<"Baba";
          break;
       case 5:
          cout<<"kalyan";
          break;
       default:
          cout<<"The rank which you entered is not from top";
          break;
   }
    
}


Operators in c++
----------------------------------------------------------------------------------------------------------------------------------------------------
--> operators are the symbols which perform specfic task on operands.

1. Arithmetic Operators :
Ex :  +, -, /, //, %, *

2. Relational Operators :
Ex :  >, <, >=, <=, ==, !=

3. Logical Operators :
Ex :  &&, ||

4. Bitwise Operators :
Ex :  &, ^, <<, >>, ~

5. Assignment Operators :
Ex :  =

**** Arithmetic operators along with assignment operators is called as arithmetic assignment operators.
Ex :  +=, -=, /=, %=, *=

6. comma operator :
Ex : a = (1, 2,3)
        cout<<a;

output:  3


7. Ternary Operator
-------------------------

Ex1:

#include <iostream>
using namespace std;
int main() {
  int age = 4;
  string vote;
  // Using ternary operator
  vote = (age >= 18) ? "Eligible" : "Not Eligible";
  cout << vote << endl;
  return 0;
}


Ex2:

#include <iostream>
using namespace std;
int main() {
    int a = 10, b = 20, c = 30, res;
    res = a > b ? (a > c ? a : c) : (b > c ? b : c);  // nesting of ternary operator
    cout << "maximum number is : " << res;
    return 0;
}


8. Scope Resolution Operator(: :)
------------------------------------------
In C++, the scope resolution operator is used to refer to a global variable or function that has been hidden by a 
local variable or function with the same name, and also to access members of a class from outside the class.

Example
-----------#include<bits/stdc++.h>
using namespace std;

int main(){
   int n;
    cout<<"enter n \n";
    cin>>n;

    // even or not checking using bitwise operators
    // if((n & 1) == 1)
    // cout<<"odd";
    // else
    // cout<<"even";

    // swapping of two numbers without using third variable
    // int a = 10, b = 20;
    // swap(a,b);
    // a = a ^ b ^ (b = a);
    // cout<<a<<" "<<b;

    // Flipping the sign of a given 
    // n = ~n + 1;
    // cout<<n;

    // checking whether the given number is power of 2
    // if(n > 0 && (n & (n - 1)) == 0)
    // cout<<"Yes";
    // else
    // cout<<"No";

    // terenary operator
    (n >= 18)?cout<<"vote":cout<<"Not vote";
}


----------------------------------------------------------------------------------------------------------------------------------------------------

Patterns Examples :
----------------------------------------------------------------------------------------------------------------------------------------------------
Ex 1 :  Rectangle pattern

// program to demonstrate rectangle pattern
#include<iostream>
using namespace std;
int main(){
    int rows,columns;
    cout<<"Enter rows and columns :\n";
    cin>>rows>>columns;
    for(int i = 1;i <= rows;i++){
        for(int j = 1;j <= columns;j++){
            cout<<"* ";
        }
        cout<<endl;
    }
}


output :
Enter rows and columns :
3 5
* * * * * 
* * * * * 
* * * * * 


Ex 2 :  Hollow Rectangle pattern

// program to demonstrate hollow rectangle pattern
#include<iostream>
using namespace std;
int main(){
    int rows,columns;
    cout<<"Enter rows and columns :\n";
    cin>>rows>>columns;
    int i,j;
    for(i = 1;i <= rows;i++){
        for(j = 1;j <= columns;j++){
            if(i == 1 || i == rows || j == 1 || j == columns){
            cout<<"*";
            }
            else{
            cout<<" ";
            }
        }
        cout<<endl;
    }
}


output :

Enter rows and columns :
5 4
****
*   *
*   *
*   *
****


Ex 3 : Inverted half pyramid pattern

// program to demonstrate inverted half pyramid pattern
#include<iostream>
using namespace std;
int main(){
    int n;
    cout<<"Enter n :\n";
    cin>>n;
    int i,j;
    for(i = n;i >= 1;i--){
        for(j = 1;j <= i;j++){
            cout<<"* ";
        }
        cout<<endl;
    }
}

output :

Enter n :
5
* * * * * 
* * * * 
* * * 
* * 
* 


Ex 4 : Half pyramid pattern

// program to demonstrate  half pyramid pattern
#include<iostream>
using namespace std;
int main(){
    int n;
    cout<<"Enter n :\n";
    cin>>n;
    int i,j;
    for(i = 1;i <= n;i++){
        for(j = 1;j <= i;j++){
            cout<<"* ";
        }
        cout<<endl;
    }
}


output :

Enter n :
5
* 
* * 
* * * 
* * * * 
* * * * *


Ex 5 : Left Half pyramid pattern
// program to demonstrate inverted half pyram pattern
#include<iostream>
using namespace std;
int main(){
    int n;
    cout<<"Enter n :\n";
    cin>>n;
    int i,j;
    for(i = 1;i <= n;i++){
        for(j = 1;j <= n;j++){
            if(j <= n - i){
                cout<<" ";
            }
            else{
                cout<<"*";
            }
        }
        cout<<endl;
    }
} 


output :
Enter n :
5
           * 
       *  *
    * *  * 
  * * * * 
* * * * * 

